@startuml

skinparam class {
  BackgroundColor Transparent
  BorderColor #3498DB
  ArrowColor #3498DB
  FontSize 12
  FontStyle Bold
}

class Board {
  - pieces: Piece[]
  - selected_piece: Piece
  - selected_index: int
  - special_index: int
  - hasWon: boolean
  - moves: int
  {static} WIDTH: int 
  {static} HEIGHT: int
  {static} PIECES_NUMBER: int
  + <<constructor>> Board()
  + <<constructor>> Board(pieces: Piece[])
  + <<constructor>> Board(pieces List<int[]>)
  + <<constructor>> Board(pieces List<int[]>, int move_num)
  + randomize(): void
  + selectPiece(pos: Position): boolean
  + selectPiece(piece_index: int): boolean
  + movePiece(direction: int): boolean
  + invertedMove(move: Move): boolean 
  + invertedDirection(direction: int) int
  - out_of_bounds(int dir): boolean
  - isOccupied(int x, int y): boolean 
  - trySetSpecial(int index): void
  + isSpecial(): boolean
  + isSpecial(int index): boolean
  - hasWon: boolean
  + checkWin(): boolean
  + resetWin(): void
  + getSelectedPos(): Position
  + getSelectedIndex(): int
  + getPieces(): Piece[]
  + getMoves(): int  
  + equals(other_board: Board): boolean 
}

class BoardParser {
  + BoardParser() 
  + exportBoard(p: Piece[], moves: int): String
  + importBoard(fileName: String): List<int[]>
  + saveState(p: Piece[], file: String, moves: int): void
}

class Game {
  - board: Board                     
  - temp_board: Board                
  - level: int                       
  - bParser: BoardParser             
  - log: MovesLog                    
  - best_moves: List<Move>           
  - press_position: Position         
  - pause_listener: boolean          
  - stop_solving: boolean            
  - SAVE_FILE: String                
  
  + <<constructor>> Game()                           
  - startGame(level: int): void      
  # setBoard(level_number: int): void
  # setBoard(board: Board): void     
  # setRandomBoard(): void           
  # move(move_direction: int): void  
  # reset(): void                    
  # saveState(file: String): void    
  # loadState(file: String): void    
  # undo(): void                     
  # solveAll(): void                 
  # bestMove(): void                 
  # makeMoves(moves: List<Move>): void
  # solve(): void                    
  # makeBestMove(): void             
  # checkWin(): void                 
  # selectPiece(piece_index: int): void
  # getBoard(): Board                
  # getLog(): MovesLog               
}

class Piece {
| - position: Position        |
| - width: int                |
| - height: int               |
-------------------------------
| + Piece(x: int, y: int, w: int, h: int) |
| + Piece(piece: Piece)       |
| + Piece()                   |
| - is_legal(x: int, y: int, w: int, h: int): boolean |
| + contains(x: int, y: int): boolean |
| + move(direction: int): void |
| + getX(): int               |
| + getY(): int               |
| + getProperties(): int[]     |
| + equals(other_piece: Piece): boolean |
}

class Move {
   - step: int                 
   - blockIdx: int             
   - dirIdx: int               

   + Move()                    
   + Move(s: int, b: int, d: int) 
   + setStep(step: int): void  
   + setBlockIdx(blockIdx: int): void 
   + setDirIdx(dirIdx: int): void 
   + getBlockIdx(): int        
   + getDirIdx(): int          
   + getStep(): int            
   + toString(): String    
}

class MovesLog {
   - moves_log: Stack<Move> 
   - saved_moves_log: Stack<Move>
   - step: int                
   + MovesLog()                
   + resetLog(): void          
   + pushMove(piece_index: int, move_direction: int): void 
   + popMove(): Move           
   + isEmpty(): boolean        
   + saveLog(): void           
   + loadLog(): void           
   + getStep(): int            
}

class Position {
  - x: int                    
  - y: int                    
  - MIN_MOUSE_DRAG: int       
  + Position(x: int, y: int)  
  + Position(point: Point)    
  + xDistance(final_pos: Position): int 
  + yDistance(final_pos: Position): int 
  + direction(final_pos: Position): int 
  + equals(pos: Position): boolean
  + unitConverter(): Position 
  + pixelConverter(): Position 
  + toString(): String
}

class Solver {
  - url: URL                     
  + Solver()                      
  + sendToSolver(file: String): List<Move>
}

class Theme {
  + bigBlock: Color                  
  + block: Color                     
  + blockSelected: Color             
  + blockBorder: Color               
  + endPoint: Color                  
  + background: Color                
  + menu: Color                      
  + menuText: Color                  
  + menuTextHover: Color     
}

class Button {
  - str: String            
  + Button(str: String)    
}

class Window {
  - winName: String        
  - BLOCK_SIZE: int        
  - BOARD_WIDTH: int       
  - BOARD_HEIGHT: int      
  - infoTitle: String      
  - infoGameRules: String  
  - menu: JPanel           
  - menuBar: JMenuBar      
  - board_view: JPanel     
  - boardBar: JMenuBar     
  - pieces_view: JPanel[]  
 
  + Window()               
  + setWindowSize(width: int, height: int): void 
  + showMenu(): void       
  + showBoard(board: Board): void 
  + reloadBoard(board: Board): void 
  + setBoardView(board: Board): void 
  + setMoves(m: int): void 
  + movePiecePanel(piece_index: int, x: int, y: int): void 
  + displayWin(): int      
  + displayMessage(title: String, message: String): void 
  + pressedPiece(index: int): void 
  + releasedPiece(index: int, isSpecial: boolean): void 
  + remove(panel: JPanel): void 
  + getPiece(index: int): JPanel 
  + getPlayButton(key: String): JButton 
  + getLabel(c: JComponent, key: String): JLabel 
  + getComboBox(key: String): JComboBox 
  + getMenuItem(menu_index: int, item_index: int): JMenuItem 
  + getMenuBarButton(key: String): JButton 
}

Game -up-|> Window
Game o-right- Position
Game -down-|| Board
Board -right-{ Piece
Piece -up-|| Position


@enduml

